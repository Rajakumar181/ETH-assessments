// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

/*
       REQUIREMENTS
    1. Your contract will have public variables that store the details about your coin (Token Name, Token Abbrv., Total Supply)
    2. Your contract will have a mapping of addresses to balances (address => uint)
    3. You will have a mint function that takes two parameters: an address and a value. 
       The function then increases the total supply by that number and increases the balance 
       of the “sender” address by that amount
    4. Your contract will have a burn function, which works the opposite of the mint function, as it will destroy tokens. 
       It will take an address and value just like the mint functions. It will then deduct the value from the total supply 
       and from the balance of the “sender”.
    5. Lastly, your burn function should have conditionals to make sure the balance of "sender" is greater than or equal 
       to the amount that is supposed to be burned.
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract ErrorHandler {
   
    // uint public num = 0;
    uint256 public totalSupply;

    function minting(uint amount) public {
        require(amount > 0, "Amount must be greater than zero.");
        totalSupply += amount;
    }
    function modulous(uint _a, uint _b) public pure returns (uint){
        if(_b<1){
           
            revert("The mdoulous number should be greater than zero");
            
        }
        return _a%_b;
       }
        function square(uint _num1) public pure returns(uint256){
        assert(_num1>0);// The number whose square is to be find must be greater than zero
        return _num1*_num1;
    }
}
